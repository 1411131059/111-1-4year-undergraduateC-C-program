#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct listNode 
{                                      
   int ID; 
   char name[20];
   float math, com, average;
   struct listNode *nextPtr;
}; 

typedef struct listNode ListNode;
typedef ListNode *ListNodePtr;

void insert(ListNodePtr *sPtr, int id, char* name, float math, float computer, float average);
char delete(ListNodePtr *sPtr, int value);
int isEmpty(ListNodePtr sPtr);
void printList(ListNodePtr currentPtr);
void instructions(void);

int main(void)
{ 
   ListNodePtr startPtr = NULL;
   int item;
   char name[20];
   float math, computer, average;

   instructions();
   printf("%s", "? ");
   unsigned int choice;
   scanf("%u", &choice);

   while (choice != 3)
   { 
      switch (choice)
      { 
         case 1:
            printf("%s", "id: ");
            scanf("\n%d", &item);
            printf("%s", "name: ");
            scanf("\n%s", &name);
            printf("%s", "math: ");
            scanf("\n%f", &math);
            printf("%s", "com: ");
            scanf("\n%f", &computer);
            average = (math+computer)/2;
            insert(&startPtr, item,name,math,computer,average);
            printList(startPtr);
            break;
         case 2:
            if (!isEmpty(startPtr)) 
            { 
               printf("%s", "id: ");
               scanf("\n%d", &item);

               if (delete(&startPtr, item)) 
               { 
                  printf("%d deleted.\n", item);
                  printList(startPtr);
               } 
               else 
               {
                  printf("%d not found.\n\n", item);
               } 
            } 
            else 
            {
               puts("List is empty.\n");
            }    
            break;
         default:
            puts("Invalid choice.\n");
            instructions();
            break;
      } 
      printf("%s", "? ");
      scanf("%u", &choice);
   } 
   puts("End of run.");
} 

void instructions(void)
{ 
   puts("Enter your choice:\n"
      "   1 to insert an element into the list.\n"
      "   2 to delete an element from the list.\n"
      "   3 to end.");
} 

void insert(ListNodePtr *sPtr, int id, char* name, float math, float computer, float average)
{ 
   ListNodePtr newPtr = malloc(sizeof(ListNode)); 

   if (newPtr != NULL) 
   {
      newPtr->ID = id; 
      strcpy(newPtr->name, name);
      newPtr->math = math; 
      newPtr->com = computer; 
      newPtr->average = average;
      newPtr->nextPtr = NULL; 

      ListNodePtr previousPtr = NULL;
      ListNodePtr currentPtr = *sPtr;
      
      while (currentPtr != NULL && id > currentPtr->ID) 
      {
         previousPtr = currentPtr;             
         currentPtr = currentPtr->nextPtr; 
      }                                          

      if (previousPtr == NULL) 
      { 
         newPtr->nextPtr = *sPtr;
         *sPtr = newPtr;
      } 
      else 
      { 
         previousPtr->nextPtr = newPtr;
         newPtr->nextPtr = currentPtr;
      } 
   } 
   else 
   {
      printf("%d not inserted. No memory available.\n", id);
   } 
} 

char delete(ListNodePtr *sPtr, int value)
{ 
   if (value == (*sPtr)->ID) 
   { 
      ListNodePtr tempPtr = *sPtr;
      *sPtr = (*sPtr)->nextPtr;
      free(tempPtr);
      return value;
   } 
   else 
   { 
      ListNodePtr previousPtr = *sPtr;
      ListNodePtr currentPtr = (*sPtr)->nextPtr;

      while (currentPtr != NULL && currentPtr->ID != value)
      { 
         previousPtr = currentPtr; 
         currentPtr = currentPtr->nextPtr; 
      } 

      if (currentPtr != NULL) 
      { 
         ListNodePtr tempPtr = currentPtr;
         previousPtr->nextPtr = currentPtr->nextPtr;
         free(tempPtr);
         return value;
      } 
   } 

   return '\0';
} 

int isEmpty(ListNodePtr sPtr)
{ 
   return sPtr == NULL;
} 


void printList(ListNodePtr currentPtr)
{ 
   if (isEmpty(currentPtr))
   {
      puts("List is empty.\n");
   } 
   else { 
      puts("result:");

      while (currentPtr != NULL) 
      { 
         printf("%d %s %.2f %.2f %.2f--> ", currentPtr->ID,currentPtr->name,currentPtr->math,currentPtr->com,currentPtr->average);
         currentPtr = currentPtr->nextPtr;   
      } 
      puts("NULL\n");
   } 
} 
